#!/bin/bash
# Build a specific file.
# Copyright (C) 2023-2024  Kevin Sandom

inFile="${1:-cvData/cvData.md}"
tmpFile="/tmp/$$-cv.md"
variant="$2"
suggestedVersion="${3:-0}"
cvConfig="cvData/cvConfig"
type="${4:-pdf}"

function suggestName
{
  echo "$(date +%Y-%m-%d).$1"
}

function getFileName
{
  local name="$1"
  local variantText="$2"

  if [ "$variantText" == '' ]; then
    echo "$name-cv-$whoCamel.pdf"
  else
    echo "$name-cv-$whoCamel-$variantText.$type"
  fi
}

function handleOldVersions
{
  # Move old versions out of the way.
  local directory="$1"
  local startDirectory="$(pwd)"
  local variant="$2"

  cd "$directory"
  mkdir -pv old
  mv -v *-cv-*-$variant.pdf* old
  cd "$startDirectory"
}

function isCustom
{
  local name="$1"

  local result=0
  if cvList variants | grep -q "^$name$"; then
    result=1
  fi

  return "$result"
}


# Choose which variant to work on.
if [ "$variant" == '' ]; then
  echo "Variant not specified, so using the default."
  variant="full"
fi

echo "Variant: $variant"


# Don't run if we aren't in the right place.
if [ ! -e "cvData" ]; then
    echo "$variant: Expected to see the cvData directory. Exiting." >&2
    exit 1
fi


# Load the config.
if [ -e "$cvConfig" ]; then
  echo "$variant: Found config."
  . "$cvConfig"
else
  echo "$variant: "$cvConfig" not found. Weird things will happen. Make sure to run cvSetWho."
fi


# Load filters if available.
filters=""
colsFile=~/.config/cvMangle/lib/hk-pandoc-filters/column-div/column-div.lua
if [ -e "$colsFile" ]; then
  filters="--lua-filter=$colsFile "
  echo "$variant: Filters: \"$filters\""
else
  echo "$variant: No filters."
fi


# Figure out the name and version.
name="$(suggestName "$suggestedVersion")"
outFile="$(getFileName "$name" "$variant")"

if [ "$CV_NO_AUTO" == '' ]; then
  let attempt=0
  while [ -e "$outFile" ]; do
    let attempt=$attempt+1
    echo "$variant: $outFile already exists. Trying the next iteration."
    name="$(suggestName $attempt)"
    outFile="$(getFileName "$name" "$variant")"
  done
else
  echo "$variant: CV_NO_AUTO is set to \"$CV_NO_AUTO\". Using the suggested version number of $suggestedVersion."
  echo "$variant: File out: \"$outFile\" ."
fi

# Change destination if it's custom.
isCustom "$variant"
custom="$?"
convenienceSymlinkName="convenience-cvLive.pdf"
convenienceSymlink=""
if [ -e "outs/$variant" ]; then
  outFile="outs/$variant/$outFile"
  convenienceSymlink="outs/$variant/$convenienceSymlinkName"
  handleOldVersions "outs/$variant" "$variant"
elif [ "$custom" == "0" ]; then
  outFile="custom/$outFile"
  convenienceSymlink="custom/$variant-$convenienceSymlinkName"
  echo "$variant: Is custom. New destination: $outFile"
  mkdir -p custom
  handleOldVersions custom "$variant"
else
  echo "$variant: Is not custom."
  handleOldVersions . "$variant"
fi


# Put in variables.
echo "$variant: Preparing input: $tmpFile."
sed 's/~!today!~/'$name'/g;s/~!whoNatural!~/'"$whoNatural"'/g;s/~!whoCamel!~/'"$whoCamel"'/g;s/~!variant!~/'"${variant^}"'/g' "$inFile" > "$tmpFile"


# Generate the PDF.
echo "$variant: Writing to \"$outFile\""
pandoc $filters--pdf-engine xelatex "$tmpFile" -o "$outFile"


# Create a convenience symlink for live updates while editing.
if [ "$convenienceSymlink" != '' ]; then
  outDir="$(dirname "$outFile")"
  srcFile="$(basename "$outFile")"
  echo "dir=$outDir  file=$srcFile  mainFile=$outFile"
  cd "$outDir"
  pwd
  ln -sfv "$srcFile" "$convenienceSymlink"
  cd ~-
fi


# Clean up.
rm -f "$tmpFile"
