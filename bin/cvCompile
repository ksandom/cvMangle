#!/bin/bash
# Compile markdown into a single markdown file.
# Copyright (C) 2023-2024  Kevin Sandom

function listParts
{
    ls -1 | sort
}

function getFilesFromList
{
    fileName="$1"

    grep -v '^\(\|#.*\)$' "$fileName"
}

function doInclude
{
    local file="$1"
    local contextOverride="$2"
    local head="$3"
    local startingContext="$context"

    if [ "$contextOverride" == '-->' ] || [ "$contextOverride" == '.' ]; then
        contextOverride=''
    fi

    if [ "$context" != '' ] || [ "$contextOverride" != '' ]; then
        if [ "$contextOverride" != '' ]; then
            context="$contextOverride"
        fi

        file="$(echo "$file" | sed "s#~\!context\!~#$context#g")"
    fi

    if [ "$head" == '-->' ]; then
        head=''
    fi

    if [ ! -e "$file" ]; then
        echo "Could not find file \"$file\"." >&2
        return
    fi

    while IFS= read -r line; do
        read -r pC0 pDo command p1 p2 p3 p4 p5 p6 p7 p8 < <(echo "$line")
        identifier="$pC0 $pDo"
        if [ "$identifier" == '<!-- do' ]; then
            doCommand "$command" "$p1" "$p2" "$p3" "$p4" "$p5" "$p6" "$p7" "$p8"
        elif [ "$identifier" == '<!-- #' ]; then
            # Local comments that shouldn't make it to the final file.
            true
        elif [ "$identifier" == '<!-- Copyright' ]; then
            # Copyright lines shouldn't make it to the final file.
            true
        else
            echo "$line"
        fi
    done < <(readFile "$file" "$head")

    context="$startingContext"
}

function doFilteredInclude
{
    local rawFilterName="$1"
    local file="$2"
    local contextOverride="$3"
    local head="$4"

    local filter="$(getFilter "$rawFilterName")"
    if [ "${rawFilterName:0:1}" != '!' ]; then
        doInclude "$file" "$contextOverride" "$head" | grep -i "\($filter\)"
    else
        doInclude "$file" "$contextOverride" "$head" | grep -iv "\($filter\)"
    fi
}

function doHighlightFilterInclude
{
    local rawFilterName="$1"
    local file="$2"
    local contextOverride="$3"
    local head="$4"

    local filter="$(getFilter "$rawFilterName")"
    local surround='\(\ \|-\|\[\|\]\|,\|:\)'
    doInclude "$file" "$contextOverride" "$head" | sed "s|$surround\($filter\)$surround|\1**\2**\3|g"
}

function noComments
{
    grep -v '^<!--' | sed 's/<!--.*-->//g'
}

function noNewLines
{
    lines="$(grep -v '^ *$')"
    # echo -e "\n\nLines begin:----------" >&2
    # echo "$lines" >&2
    echo "$lines"
    # echo -e "Lines ended.------------" >&2
}

function noLinks
{
    sed 's/\]([^\[]*)//g;s/\[//g'
}

function toList
{
    local previousLine=''
    local hasDisplayedSomething='false'

    local showNewLine="$1"
    local firstLinePrefix="$2"

    while read -r line; do
        if [ "$line" != '' ]; then
            if [ "$previousLine" != '' ]; then
                showListItem "$hasDisplayedSomething" "$firstLinePrefix" ","
                hasDisplayedSomething='true'
            fi
        else
            hasDisplayedSomething='false'
            if [ "$previousLine" != '' ]; then
                showListItem "$hasDisplayedSomething" "$firstLinePrefix" "."
            fi
            [ "$showNewLine" == 'true' ] && echo
        fi
        previousLine="$line"
    done

    if [ "$previousLine" != '' ]; then
        showListItem "$hasDisplayedSomething" "$firstLinePrefix" "."
    fi
    [ "$showNewLine" == 'true' ] && echo
}

function showListItem
{
    local hasDisplayedSomething="$1"
    local firstLinePrefix="$2"
    local lineSuffix="$3"

    if [ "$hasDisplayedSomething" == 'true' ]; then
        echo "$previousLine$lineSuffix "
    else
        echo "$firstLinePrefix$previousLine$lineSuffix "
    fi
}

function getFilter
{
    local rawFilterName="$1"
    if [ "$rawFilterName" == '-->' ]; then
        echo "getFilter: Got '-->'" >&2
        return 0
    fi

    if [ -e "$rawFilterName" ]; then
        echo "getFilter: $rawFilterName looks like a file or folder. Expected a filterName." >&2
        return 0
    fi

    local filterName=''
    if [ "${rawFilterName:0:1}" != '!' ]; then
        filterName="filter_$rawFilterName"
    else
        filterName="filter_${rawFilterName:1}"
    fi

    filter="${!filterName}"
    if [ "$filter" == '' ]; then
        filter='.*'
        echo "Filter $rawFilterName is used, but not set. Defaulting to this:" >&2
        echo "<!-- do createFilter $rawFilterName .* -->" >&2
    fi

    echo "$filter"
}

function processVariables
{
    local fileIn="$1"

    echo "Overrideable defaults:"
    while read -r line; do
        rawVarName="$(echo "$line" | cut -d\  -f1)"
        varName="var_$rawVarName"
        defaultValue="$(echo "$line" | cut -d\  -f2-)"
        setValue="${!varName}"

        if [ "$setValue" == '' ]; then
            value="$defaultValue"
        else
            value="$setValue"
        fi

        #echo "  var=$varName default=\"$defaultValue\" set=\"$setValue\" use=\"$value\""
        echo "<!-- do override $rawVarName $defaultValue -->"

        sed -i "s|~#$rawVarName#.*#~|$value|g" "$fileIn"
    done < <(getVariablesInFile "$fileIn")

    rm -f "$tmpFile"
}

function getVariablesInFile
{
    local fileIn="$1"
    grep '~#.*#.*#~' "$fileIn" | sed 's/^.*~#//g;s/#~.*$//g;s/#/ /g'
}

function readFile
{
    local fileName="$1"
    local head="$2"

    if [ "$head" == '' ]; then
        cat "$fileName"
    else
        head -n"$head" "$fileName"
    fi
}

function limit
{
    local head="$1"

    if [ "$head" == '' ] || [ "$head" == '-->' ] ; then
        cat -
    else
        if [ "$head" -gt 0 ]; then
            head -n"$head"
        else
            cat -
        fi
    fi
}

function doForEach
{
    local limit="$1"
    local collection="$2"
    local command="$3"
    local p1="$4"
    local p2="$5"
    local p3="$6"
    local p4="$7"
    local p5="$8"
    local p6="$9"

    if [ "$limit" == '.' ]; then
        limit=9999
    fi

    while read item; do
        context="$collection/$item"
        doCommand "$command" "$p1" "$p2" "$p3" "$p4" "$p5" "$p6" "$p7"
        unset context
    done < <(getCollection "$collection" | head -n"$limit")
}

function getCollection
{
    cd "$1"
    ls -1 | sort -r | grep -v _template
    cd ~-
}

function doCommand
{
    local command="$1"
    local p1="$2"
    local p2="$3"
    local p3="$4"
    local p4="$5"
    local p5="$6"
    local p6="$7"
    local p7="$8"
    local p8="$9"

    case "$command" in
        'include')
            doInclude "$p1" "$p2" | limit "$p3"
        ;;
        'forEach')
            doForEach . "$p1" "$p2" "$p3" "$p4" "$p5" "$p6" "$p7" "$p8"
        ;;
        'forEachLimit')
            doForEach "$p1" "$p2" "$p3" "$p4" "$p5" "$p6" "$p7" "$p8"
        ;;
        'createFilter')
            # <!-- do createFilter skills chef|terraform|pagerduty|pingdom -->
            local filterName="filter_$p1"
            export "$filterName"="$(echo "$p2|always" | sed 's/|/\\|/g')"
            echo "Created filter $p1 = ${!filterName}" >&2
        ;;
        'filteredInclude')
            # <!-- do filteredInclude skills ~!context!~/skills-dev.md  -->
            doFilteredInclude "$p1" "$p2" "$p3" | noComments | limit "$p4"
        ;;
        'filteredIncludeToList')
            # <!-- do filteredIncludeToList skills ~!context!~/skills-dev.md  -->
            doFilteredInclude "$p1" "$p2" "$p3" | noComments | noNewLines | toList | limit "$p4"
        ;;
        'filteredIncludeToBulletedList')
            # <!-- do filteredIncludeToList skills ~!context!~/skills-dev.md  -->
            doFilteredInclude "$p1" "$p2" "$p3" | noComments | toList true '* ' | limit "$p4"
        ;;
        'highlightFilterInclude')
            # <!-- do highlightFilterInclude skills src/keySkills/skillMap-withYears-sysadmin.md -->
            doHighlightFilterInclude "$p1" "$p2" "$p3" | noComments | limit "$p4"
        ;;
        'override')
            # <!-- do override job1Title Head chef -->
            local varName="var_$p1"
            export "$varName"="$(echo "$p2" "$p3" "$p4" "$p5" "$p6" "$p7" "$p8" | sed 's/ *--> *$//g')"
            echo "Overrode var $p1 = ${!varName}" >&2
        ;;
        'noLinks')
            # <!-- do noLinks filteredInclude skills ~!context!~/skills-dev.md  -->
            doCommand "$p1" "$p2" "$p3" "$p4" "$p5" "$p6" "$p7" "$p8" | noLinks
        ;;
        *)
            echo "cvCompile: Unknown command: \"$command\" in \"$line\"" >&2
        ;;
    esac
}

function doCompile
{
    name="$1"
    variantFile="cvData/variant/$name.md"
    outFile="compiled/$name.md"

    if [ ! -e "$variantFile" ]; then
        echo "Could not find variant \"$name\" in \"$variantFile\" from \"$(pwd)\"."
        variantFile="cvData/custom/$name.md"
        if [ -e "$variantFile" ]; then
            echo "Found \"$variantFile\" instead. Continuing."
        else
            exit 1
        fi
    fi

    cd cvData

    echo "Compiling \"$name\"."
    rm -f "$outFile"
    touch "$outFile"

    doInclude "../$variantFile" >> "$outFile"
    processVariables "$outFile"

    echo "Finished \"$name\"."
    cd ..
}

# Don't run if we aren't in the right place.
if [ ! -e "cvData" ]; then
    echo "$variant: Expected to see the cvData directory. Exiting." >&2
    exit 1
fi


# Figure out what to compile.
if [ "$1" == '' ]; then
    while read variant; do
        doCompile "$variant" &
    done < <(cvList)
    wait
else
    doCompile "$1"
fi
